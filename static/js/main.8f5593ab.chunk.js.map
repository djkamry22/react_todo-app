{"version":3,"sources":["Footer.js","TodoList.js","App.js","index.js"],"names":["Footer","_ref","filterBy","currentFilter","clearCompletedAll","react_default","a","createElement","className","href","onClick","TodoList","tasks","changeStatus","destroyTask","map","task","completed","type","id","concat","checked","onChange","htmlFor","title","App","state","currentIndex","writeTasks","event","preventDefault","_this","setState","Object","toConsumableArray","taskId","currentTask","find","filter","completedAll","objectSpread","every","didAllTask","filterTodos","howToFilter","_this2","this","onSubmit","placeholder","value","target","src_TodoList","src_Footer","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.8f5593ab.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Footer({ filterBy, currentFilter, clearCompletedAll }) {\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n            3 items left\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={currentFilter === 'All' && 'selected'}\n            onClick={() => filterBy('All')}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            className={currentFilter === 'Active' && 'selected'}\n            href=\"#/active\"\n            onClick={() => filterBy('Active')}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            className={currentFilter === 'Completed' && 'selected'}\n            onClick={() => filterBy('Completed')}\n            href=\"#/completed\"\n          >\n            Completed\n          </a>\n        </li>\n\n        <li>\n          <a\n            onClick={clearCompletedAll}\n            href=\"#/clear-completed\"\n          >\n            Clear all completed\n          </a>\n        </li>\n      </ul>\n    </footer>\n  );\n}\n\nFooter.propTypes = {\n  filterBy: PropTypes.func.isRequired,\n  currentFilter: PropTypes.func.isRequired,\n  clearCompletedAll: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\n\nconst TodoList = ({ tasks, changeStatus, destroyTask }) => (\n  tasks.map(task => (\n    <li className={task.completed && 'completed'}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={`todo-${task.id}`}\n          checked={task.completed}\n          onChange={() => changeStatus(task.id)}\n        />\n        {/* eslint-disable-next-line */}\n        <label htmlFor={`todo-${task.id}`}>\n          {task.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => destroyTask(task.id)}\n        />\n      </div>\n    </li>\n  ))\n);\n\nexport default TodoList;\n","import React from 'react';\nimport Footer from './Footer';\nimport TodoList from './TodoList';\n\nclass App extends React.Component {\n  state = {\n    tasks: [],\n    currentFilter: 'All',\n    title: '',\n    currentIndex: 0,\n  }\n\n  writeTasks = (event) => {\n    event.preventDefault();\n    this.setState(state => ({\n      tasks: [...state.tasks, {\n        title: state.title,\n        completed: false,\n        id: state.currentIndex,\n      }],\n      title: '',\n      currentIndex: state.currentIndex + 1,\n    }));\n  }\n\n  changeStatus = (taskId) => {\n    const currentTask = this.state.tasks.find(task => task.id === taskId);\n\n    currentTask.completed = !currentTask.completed;\n    this.setState(state => ({\n      tasks: [...state.tasks],\n    }));\n  }\n\n  destroyTask = (taskId) => {\n    this.setState(state => ({\n      tasks: state.tasks.filter(task => task.id !== taskId),\n    }));\n  }\n\n  completedAll = () => {\n    this.setState(state => ({\n      tasks: state.tasks.map(task => ({\n        ...task,\n        completed: !state.tasks.every(didAllTask => didAllTask.completed),\n      })),\n    }));\n  }\n\n  filterTodos = (filter) => {\n    if (filter === 'All') {\n      return this.state.tasks;\n    }\n\n    if (filter === 'Active') {\n      return this.state.tasks.filter(task => !task.completed);\n    }\n\n    return this.state.tasks.filter(task => task.completed);\n  }\n\n  filterBy = (howToFilter) => {\n    this.setState({\n      currentFilter: howToFilter,\n    });\n  }\n\n  clearCompletedAll = () => {\n    this.setState(state => ({\n      ...state,\n      tasks: state.tasks.filter(task => !task.completed),\n    }));\n  }\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={this.writeTasks}>\n            <input\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={this.state.title}\n              onChange={event => this.setState({\n                title: event.target.value,\n              })}\n            />\n          </form>\n\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onClick={this.completedAll}\n          />\n          {/*  eslint-disable-next-line */ }\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <ul className=\"todo-list\">\n            <TodoList\n              tasks={this.filterTodos(this.state.currentFilter)}\n              changeStatus={this.changeStatus}\n              destroyTask={this.destroyTask}\n            />\n          </ul>\n        </section>\n        <Footer\n          tasks={this.state.tasks}\n          filterBy={this.filterBy}\n          currentFilter={this.state.currentFilter}\n          clearCompletedAll={this.clearCompletedAll}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}